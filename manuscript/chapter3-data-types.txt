# Data Types

In this chapter, we delve into data types in Go, an essential aspect to understand when programming in this language. We encourage you to run these examples using the `go run` command as introduced in Chapter 1 to reinforce your learning. Put the code examples directly in the `main()` function of your Go program. 

## Basic Data Types

Go is statically typed, meaning each variable has a specific type that is determined at compile time. Let's discuss some basic data types.

### Integer Types

In Go, there are several integer types with varying sizes. The `int` and `uint` types are either 32 or 64 bits, depending on the underlying system. Here's an example of declaring an integer variable:

```go
var nodeCount int = 3
fmt.Println(nodeCount)  // Prints '3'
```

### Float Types

Floating-point types represent numbers with decimal points. Go has two floating-point types: `float32` and `float64` (double precision).

```go
var nodeLoadAverage float64 = 2.5
fmt.Println(nodeLoadAverage)  // Prints '2.5'
```

### Boolean Type

The boolean type, `bool`, represents `true` or `false`:

```go
var isPodRunning bool = true
fmt.Println(isPodRunning)  // Prints 'true'
```

### String Type

Strings are sequences of characters. In Go, strings are immutable, meaning once created, they cannot be changed.

```go
var podName string = "mypod"
fmt.Println(podName)  // Prints 'mypod'
```

## Complex Data Types

Beyond these basic types, Go offers more complex types like arrays, slices, maps, and structs.

### Arrays

An array is a fixed-length sequence of items of the same type:

```go
var clusterIps [3]string
clusterIps[0] = "10.0.0.1"
clusterIps[1] = "10.0.0.2"
clusterIps[2] = "10.0.0.3"
fmt.Println(clusterIps)  // Prints '[10.0.0.1 10.0.0.2 10.0.0.3]'
```

### Slices

A slice is similar to an array, but its length is not fixed:

```go
podNames := []string{"mypod1", "mypod2", "mypod3"}
fmt.Println(podNames)  // Prints '[mypod1 mypod2 mypod3]'
```

### Maps

A map is an unordered collection of key-value pairs. Here's an example:

```go
podStatus := map[string]string{
    "mypod1": "Running",
    "mypod2": "Pending",
    "mypod3": "Failed",
}
fmt.Println(podStatus)  // Prints 'map[mypod1:Running mypod2:Pending mypod3:Failed]'
```

### Structs

A `struct` is a collection of fields with different types:

```go
type Pod struct {
    Name   string
    Status string
    IP     string
}

mypod := Pod{
    Name:   "mypod",
    Status: "Running",
    IP:     "10.0.0.1",
}
fmt.Println(mypod)  // Prints '{mypod Running 10.0.0.1}'
```

### Summary Table

| Data Type   | Description                                                                           |
| ----------- | ------------------------------------------------------------------------------------- |
| Integer     | Numeric type used for whole numbers. Includes `int`, `int8`, `int16`, `int32`, `int64`. Also includes unsigned versions `uint`, `uint8`, `uint16`, `uint32`, `uint64`. |
| Float       | Numeric type used for numbers with decimals. Includes `float32`, `float64`.            |
| Boolean     | Logical type that can only be `true` or `false`.                                       |
| String      | A sequence of characters.                                                              |
| Array       | Fixed-length sequence of items of the same type.                                       |
| Slice       | Similar to an array but length is not fixed.                                           |
| Map         | Unordered collection of key-value pairs.                                               |
| Struct      | Collection of fields with different types.                                             |


## Conclusion

Understanding the different data types in Go is fundamental to programming in the language. As you have seen, Go provides a variety of types that allow us to model real-world concepts in our programs. Whether you're representing the count of nodes in a Kubernetes cluster or the statuses of different pods, Go's data types have you covered.

Next up, we will explore control structures in Go to add logic and flow to our programs. Until then, keep practicing and running your Go code!
