# Data Types

In this chapter, we delve into data types in Go, an essential aspect to understand when programming in this language. We encourage you to run these examples using the `go run` command as introduced in Chapter 1 to reinforce your learning. Put the code examples directly in the `main()` function of your Go program. 

## Basic Data Types

Go is statically typed, meaning each variable has a specific type that is determined at compile time. Let's discuss some basic data types.

### Integer Types

In Go, there are several integer types with varying sizes. The `int` and `uint` types are either 32 or 64 bits, depending on the underlying system. Here's an example of declaring an integer variable:

```go
var nodeCount int = 3
fmt.Println(nodeCount)
```

### Float Types

Floating-point types represent numbers with decimal points. Go has two floating-point types: `float32` and `float64` (double precision).

```go
var nodeLoadAverage float64 = 2.5
fmt.Println(nodeLoadAverage)
```

### Boolean Type

The boolean type, `bool`, represents `true` or `false`:

```go
var isPodRunning bool = true
fmt.Println(isPodRunning)
```

### String Type

Strings are sequences of characters. In Go, strings are immutable, meaning once created, they cannot be changed.

```go
var podName string = "mypod"
fmt.Println(podName)
```

## Complex Data Types

Beyond these basic types, Go offers more complex types like arrays, slices, maps, and structs.

### Arrays

In Go, an array is a numbered sequence of elements of a specific length. It is important to note that the length is part of the array's type. Thus, arrays of different lengths are considered to be of different types.

Arrays are useful when planning an algorithm with a fixed number of logically related items. 

#### Declaring and Initializing Arrays

An array is declared with the `var` keyword, followed by a name, the size (inside square brackets `[]`), and the type of the elements. For instance:

```go
var clusterIps [3]string
```

In this case, we have declared an array named `clusterIps` that will hold three strings.

To initialize or set values to the array, we can assign values using the array index:

```go
clusterIps[0] = "10.0.0.1"
clusterIps[1] = "10.0.0.2"
clusterIps[2] = "10.0.0.3"
fmt.Println(clusterIps) // Output: [10.0.0.1 10.0.0.2 10.0.0.3]
```

#### Array Literals

Arrays can also be declared and initialized using array literals:

```go
clusterIps := [3]string{"10.0.0.1", "10.0.0.2", "10.0.0.3"}
fmt.Println(clusterIps) // Output: [10.0.0.1 10.0.0.2 10.0.0.3]
```

#### Accessing Array Elements

Elements of an array are accessed by their index starting from 0. For example, to access the first element of the `clusterIps` array, you'd use `clusterIps[0]`.

```go
firstIp := clusterIps[0]
fmt.Println(firstIp) // Output: 10.0.0.1
```


Despite their limitations in terms of flexibility, arrays are fundamental building blocks in Go. They form the basis for slices, which are vastly more flexible and commonly used.


### Slices

In Go, slices are more common than arrays due to their flexibility in size. While arrays have a fixed length, slices are dynamic and can be resized. They provide a more powerful, variable-length, and lightweight sequence of items sharing the same type.

Here we initialize the slice during creation: 

```go
podNames := []string{"mypod1", "mypod2", "mypod3"}
fmt.Println(podNames)
```

Let's explore some common methods and operations that are often used when working with slices.

#### Appending to a Slice

You can append new elements to a slice using the built-in `append` function. This function creates a new slice, increasing its length and capacity to accommodate the new elements:

```go
podNames := []string{"mypod1", "mypod2", "mypod3"}
podNames = append(podNames, "mypod4")
fmt.Println(podNames) // This will output ["mypod1", "mypod2", "mypod3", "mypod4"]
```


#### Understanding `len` and `cap` Functions

In Go, the `len` and `cap` functions provide important details about the size and capacity of slices (and arrays). 

##### The `len` Function

The `len` function returns the current length of the slice, which is the number of elements it contains. For example:

```go
podNames := []string{"mypod1", "mypod2", "mypod3"}
fmt.Println(len(podNames)) // Output: 3
```

In this case, `len(podNames)` returns `3` because there are three elements in the slice.

##### The `cap` Function

The `cap` function, on the other hand, returns the capacity of the slice. The capacity of a slice is the total number of elements the underlying array of the slice can accommodate, starting from the first element of the slice. For instance:

```go
podNames := []string{"mypod1", "mypod2", "mypod3", "mypod4", "mypod5"}
slice := podNames[1:3]
fmt.Println(cap(slice)) // Output: 4
```

In this case, `cap(slice)` returns `4` even though the slice only contains two elements. This is because the capacity considers the number of elements in the underlying array that exist to the right of the first element of the slice, including the element at the slice's starting index. So, despite the length of `slice` being `2`, its capacity is `4` (`mypod2`, `mypod3`, `mypod4`, `mypod5`).

It's important to understand the distinction between length and capacity. The length is the number of elements present in the slice, while the capacity is the number of elements the slice can hold before needing to allocate more memory.

The length of a slice can be dynamically increased (up to the capacity) using the `append` function, at which point the capacity of the slice will also increase to accommodate further additions. Understanding `len` and `cap` can help you optimize your Go programs, as knowing when memory reallocation happens can be useful for performance tuning.



### Maps

A map is an unordered collection of key-value pairs. Here's an example:

```go
podStatus := map[string]string{
    "mypod1": "Running",
    "mypod2": "Pending",
    "mypod3": "Failed",
}
fmt.Println(podStatus)
```

### Structs

A `struct` is a collection of fields with different types:

```go
type Pod struct {
    Name   string
    Running bool
    IP     string
}

mypod := Pod{
    Name:   "mypod",
    Running: true,
    IP:     "10.0.0.1",
}
fmt.Println(mypod) // Output: {mypod true 10.0.0.1}
```

## Summary of Data Types

| Data Type   | Description                                                                           |
| ----------- | ------------------------------------------------------------------------------------- |
| Integer     | Numeric type used for whole numbers. Includes `int`, `int8`, `int16`, `int32`, `int64`. Also includes unsigned versions `uint`, `uint8`, `uint16`, `uint32`, `uint64`. |
| Float       | Numeric type used for numbers with decimals. Includes `float32`, `float64`.            |
| Boolean     | Logical type that can only be `true` or `false`.                                       |
| String      | A sequence of characters.                                                              |
| Array       | Fixed-length sequence of items of the same type.                                       |
| Slice       | Similar to an array but length is not fixed.                                           |
| Map         | Unordered collection of key-value pairs.                                               |
| Struct      | Collection of fields with different types.                                             |


## Conclusion

Understanding the different data types in Go is fundamental to programming in the language. As you have seen, Go provides a variety of types that allow us to model real-world concepts in our programs. Whether you're representing the count of nodes in a Kubernetes cluster or the statuses of different pods, Go's data types have you covered.

Next up, we will explore control structures in Go to add logic and flow to our programs. Until then, keep practicing and running your Go code!
